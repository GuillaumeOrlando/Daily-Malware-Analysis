# Emotet macro cleaner. Remove unused variable and inserted junk code
# The input file should contains every functions and variables content used by the macro.
# If the macro uses some graphical form sto gather values, you need to assigne this content to a variable, otherwise it will be process as unused variable
# The keyworld 'blob' will be saved even ithout any xrefs

# Guillaume Orlando
# 08/09/2021

import argparse

keyword = ['Function', 'Attribute', 'Option', 'em', 'Create', 'End', 'Private', 'blob']
removed_variable = []
remove_list = []
removed_var = 0
removed_lines = 0
removed_func = 0
transformed_lines = 0

# Load the extracted macro file in memory
def open_vba(file_path):
    with open(file_path, 'rb') as f:
        content = f.read()
    return content.decode()


# Remove junk lines identified by the keywords 'Dim' and 'As String'
def extract_unused_dim_variable(content):
    global removed_var
    for line in content.split('\n'):
        if 'Dim' in line and 'As String' in line:
            removed_var += 1
            var_name = line.split('Dim ')[1].split('(')[0]
            remove_list.append(var_name)
            if args.verbose:
                print('\tJunk variable pattern detected for the variable "%s" in the line "%s"' % (var_name, line))
    print('\t%d junk pattern identified' % removed_var)
    return


# Remove any line that contains words in the blacklist array and return the cleaned result
def cut_unused(content, blacklist):
    global removed_lines
    loc_cnt = 0
    new_content = ''
    for line in content.split('\n'):
        if not any(bann in line for bann in blacklist):
            new_content += line + '\n'
        else:
            removed_lines += 1
            loc_cnt += 1
    if args.verbose:
        print("\t%d lines removed" % loc_cnt)
    return new_content


# Search for usage of a variable in the whole macro document
def is_used(var, content):
    for line in content.split('\n'):
        if str(var) in line:
            return True
    return False


# Search for variables that don't have any xrefs in the document
def extract_no_xrefs_variable(content):
    global removed_var
    loc_cnt = 0
    content_cpy = content
    new_content = ''
    remove = []
    for line in content.split('\n'):
        if 'Set ' in line:
            var_name = line.split('Set')[1].split('=')[0].replace(' ', '')
            ret = is_used(var_name, content.replace(line, ''))
            if not ret:
                removed_var += 1
                loc_cnt += 1
                remove.append(var_name)
                if args.verbose:
                    print('\tUnused variable "%s" in line: "%s"' % (var_name, line))
        else:
            var_name = line.split('=')[0].split(' ')[0]
            if var_name not in keyword and '.' not in var_name and var_name != '':
                ret = is_used(var_name, content.replace(line, ''))
                if not ret:
                    loc_cnt += 1
                    removed_var += 1
                    remove.append(var_name)
                    if args.verbose:
                        print('\tUnused variable "%s" in line: "%s"' % (var_name, line))
    if args.verbose:
        print('\t%d unused variables identified' % loc_cnt)
    return remove


# Eval 'wdKey' function
def eval_wdKey(content):
    global transformed_lines
    new_content = ''
    for line in content.split('\n'):
        if 'wdKeyS' in line:
            begin_line = line.split('wdKey')[0] + '"'
            replaced_char = line.split('wdKey')[1].split(')')[0] + '"' + ')'
            end_line = line.split('wdKey')[1].split(')')[1]
            new_content += begin_line + replaced_char + end_line + '\n'
            transformed_lines += 1
            if args.verbose:
                print('\tTransformation of line "%s" to "%s"' % (line, begin_line + replaced_char + end_line))
        else:
            new_content += line + '\n'
    if args.verbose:
        print('\t%d lines transformed' % transformed_lines)
    return new_content


# Remove unused functions
def search_unused_functions(content):
    global removed_func
    remove = []
    new_content = ''
    for line in content.split('\n'):
        if 'Function' in line and 'End' not in line:
            func_name = line.split('Function ')[1].split('(')[0]
            ret = is_used(func_name, content.replace(line, ''))
            if not ret:
                removed_func += 1
                remove.append(func_name)
                if args.verbose:
                    print('\tFunction "%s" identified as unused in line: "%s"' % (func_name, line))
    if args.verbose:
        print("\t%d unused function removed" % removed_func)
    return remove


# Simple indentation and formater for a better output
def pretty_output(content):
    new_content = ''
    is_func = False
    for line in content.split('\n'):
        if 'End Function' in line or 'End Sub' in line:
            is_func = False
        elif 'Function' in line and '(' in line:
            new_content += line + '\n'
            is_func = True
        elif 'Sub' in line:
            new_content += line + '\n'
            is_func = True
        elif is_func:
            new_content += '\t' + line + '\n'
        else:
            new_content += line + '\n'
    return new_content


parser = argparse.ArgumentParser()
parser.add_argument('-f', '--file', required=True, help='File containing the raw extracted macro')
parser.add_argument('-o', '--out', required=True, help='Path to the output file')
parser.add_argument('-v', '--verbose', required=False, action="store_true", help='Path to the output file')
args = parser.parse_args()

print('[+] VBA cleaner (emotet)')
print()

vba_content = open_vba(args.file)

extract_unused_dim_variable(vba_content)
vba_content = cut_unused(vba_content, remove_list)

vba_content = cut_unused(vba_content, ['On Error Resume Next'])

remove_list_2 = extract_no_xrefs_variable(vba_content)
vba_content = cut_unused(vba_content, remove_list_2)

vba_content = eval_wdKey(vba_content)

remove_list_3 = search_unused_functions(vba_content)
vba_content = cut_unused(vba_content, remove_list_3)

final = pretty_output(vba_content)
final = final.replace('\n\n\n', '\n')

#if args.verbose:
#    print(final)

with open(args.out, 'w') as f:
    f.write(final)

print()
print('[*] Unused variables : %d' % (removed_var))
print('[*] Removed lines    : %d' % (removed_lines))
print('[*] Unused functions : %d' % (removed_func))
print('[*] Cleaned lines    : %d' % (transformed_lines))
print()
print('[+] File saved to %s' % (args.out))

