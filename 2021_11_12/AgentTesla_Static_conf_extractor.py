# Static AgentTesla v3 config extractor
# Guillaume Orlando
# 12/11/2021

import re
import hashlib
import sys, struct, clr
clr.AddReference("System.Memory")
from System.Reflection import Assembly, MethodInfo, BindingFlags
from System import Type

DNLIB_PATH = '/home/homardboy/Downloads/dnlib.dll'
clr.AddReference(DNLIB_PATH)

import dnlib
from dnlib.DotNet import *
from dnlib.DotNet.Emit import OpCodes

SAMPLE_PATH = sys.argv[1]
module = dnlib.DotNet.ModuleDefMD.Load(SAMPLE_PATH)

eFlags = BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic

def get_array_data_by_token(token):
    for mtype in module.GetTypes():
        if mtype.get_HasFields():
            for field in mtype.get_Fields():
                if field.get_MDToken() == token:
                    try:
                        return bytes(field.get_InitialValue())
                    except:
                        return None
    return None

def get_encrypted_strings_buffer():
    for mtype in module.GetTypes():
        if not mtype.HasMethods:
            continue
        for method in mtype.Methods:
            if 'cctor' in str(method) and 'PrivateImplementationDetails' in str(method):
                for ptr in range(len(method.Body.Instructions)):
                    instruction = method.Body.Instructions[ptr]
                    if str(instruction.OpCode) == 'ldtoken':
                        for i in range(0, len(method.Body.Instructions)):
                            value = method.Body.Instructions[i]
                            if ((value.Operand) != None) and ('PrivateImplementationDetails' in str(value)) and ('ldtoken' in str(value)):
                                token = value.Operand.MDToken
                                ctxt = get_array_data_by_token(token)
                                return(token, ctxt)
            continue
    return(False, False)

def decrypt_strings(data, key):
    int_data = []
    for elem in data:
        int_data.append(elem)
    plaintext = ''
    for x in range(0, len(int_data)):
        int_data[x] = (int_data[x] ^ x ^ key) & 0xff
    for elem in int_data:
        plaintext += chr(elem)
    return plaintext

def extract_bot_infos(plain):
    gate = re.findall('http://\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}/.*.php', plain)[0]
    bot_id = re.findall('[A-Fa-f0-9]{64}', plain)[0]
    return(gate, bot_id)

md5 = hashlib.md5(open(SAMPLE_PATH,'rb').read()).hexdigest()
default_key = 170
token, data = get_encrypted_strings_buffer()
plain = decrypt_strings(data, default_key)
gate, bot_id = extract_bot_infos(plain)
print('campaign id    : %s\ngate           : %s\nMD5 agentTesla : %s' % (bot_id, gate, md5))
